pipeline {
    agent {label 'ec2'}

    environment {
        TF_CLI_ARGS="-no-color"
        TF_IN_AUTOMATION="true" // effective if not empty
    }

    parameters {
        booleanParam(name: 'DESTROY_DB', defaultValue: false, description: 'Check out to permanently delete database resource')
        booleanParam(name: 'STOP_DB', defaultValue: true, description: 'Check out to stop RDS instance')
    }

    stages {
        stage('tf init') {
            steps {
                sh "terraform -chdir=tf-provision init -input=false"
            }
        }
        stage('tf destroy') {
            steps {
                sh "terraform -chdir=tf-provision destroy -auto-approve -input=false"
            }
        }
        stage('tf db init') {
            steps {
                sh "terraform -chdir=tf-db init -input=false"
            }
        }
        stage('db stop') {
            when {
                expression { return params.STOP_DB }
            }
            steps {
                script {
                    def instance_id = sh(
                      returnStdout: true, 
                      script: 'terraform -chdir=tf-db output -raw RdsInstanceIdentifier'
                    ).trim()
                    if (instance_id) {
                        sh """aws rds stop-db-instance \
                            --db-instance-identifier ${instance_id}"""
                    }
                }
            }
        }
        stage('tf db destroy') {
            when {
                expression { return params.DESTROY_DB }
            }
            steps {
                sh "terraform -chdir=tf-db destroy -auto-approve -input=false"
            }
        }
    }
}