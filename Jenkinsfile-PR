def image_tag
def pom_version
pipeline {
    agent {label 'ec2'}

    environment {
        // CI repo dir name
        CI_REPO="CI-REPOSITORY"
        TF_CLI_ARGS="-no-color"
    }

    tools {
        // Install Maven
        maven 'maven-3.9.2'
    }

    options { 
        skipDefaultCheckout() 
    }

    stages {
        stage('checkout SCM') {
            steps {
                // checkout app repo
                checkout scm
                // checkout CI repo to ./"${env.CI_REPO_DIR}"
                checkout scmGit(
                    branches: [[name: 'main']], 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${env.CI_REPO}"]], 
                    // CI repo URL from var set by emote Jenkinsfile Provider plugin
                    // see Job DSL in jenkins-casc.yaml
                    userRemoteConfigs: [[url: "${env.RJPP_SCM_URL}"]]
                )

                // set custom build name
                script {
                    def pom = readMavenPom()
                    pom_version = pom.getVersion()

                    // determine docker image tag
                    if (env.BRANCH_NAME == 'main') {
                        image_tag = pom_version
                    } else {
                        image_tag = sh(
                              returnStdout: true, 
                              script: 'git rev-parse --short HEAD'
                          ).trim()
                    }
                    currentBuild.displayName = "#" + currentBuild.number + "-${image_tag}"
                }
            }
        }

        // validate appllication version from pom.xml (only PRs and main branch)
        stage('validate version') {
          when{
            anyOf{
              branch 'PR-*'
              branch 'main'
            }
          }
          steps {
            withCredentials([gitUsernamePassword(credentialsId: 'jenkins-petclinic-token-user', gitToolName: 'Default')]) {
              sh """
                # check if version tag already exists in repo
                if [[ \$(git tag) =~ ${pom_version} ]];
                then
                  echo "Version ${pom_version} already in repo tags" 
                  exit 1
                fi;

                # check if versioon confoorms to convention
                if [[ ! ${pom_version} =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\$ ]];
                then
                  echo "Version ${pom_version} doesn't match the X.X.X pattern"
                  exit 1
                fi;

                echo "Version ${pom_version} OK"
                exit 0
                """
            }
          }
        }
        stage('test app') {
            steps {
                echo "Building..."
                sh "mvn --batch-mode clean package"
            }
        }
        stage('build container') {
            steps {
              echo "Building docker container..."
              sh "docker build -q -t jlipinski-petclinic:${image_tag} ."
            }
        }
        stage('push container') {
            steps {
              withAWSParameterStore(credentialsId: '', naming: 'basename', path: '/jlipinski', recursive: true, regionName: 'eu-central-1') {
                echo "Docker login to ECR..."
                sh "aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_REGISTRY_URL"
                echo "Tagging the image..."
                sh "docker tag jlipinski-petclinic:${image_tag} $ECR_REGISTRY_URL:${image_tag}"
                echo "Pushing container to ECR..."
                sh "docker push -q $ECR_REGISTRY_URL:${image_tag}"
              }
            }
        }
        // tag a commit (only main branch)
        stage('tag commit') {
          when {
            branch 'main'
          }
          steps {
            withCredentials([gitUsernamePassword(credentialsId: 'jenkins-petclinic-token-user', gitToolName: 'Default')]) {
              sh "git tag ${image_tag}"
              sh "git push origin ${image_tag}"
            }
          }
        }
    }
}