def app_server_ip
pipeline {
    agent {label 'ec2'}

    environment {
        TF_CLI_ARGS="-no-color"
        TF_IN_AUTOMATION="true" // effective if not empt
    }


    stages {
        stage('tf db init') {
            steps {
                sh "terraform -chdir=tf-db init -input=false"
            }
        }
        stage('tf db apply') {
            steps {
                sh "terraform -chdir=tf-db apply -auto-approve -input=false"
                script {
                    def instance_id = sh(
                      returnStdout: true, 
                      script: 'terraform -chdir=tf-db output -raw RdsInstanceIdentifier'
                    ).trim()
                    sh """aws rds start-db-instance \
                        --db-instance-identifier ${instance_id}"""
                }
            }
        }
        stage('tf init') {
            steps {
                sh "terraform -chdir=tf-provision init -input=false"
            }
        }
        stage('tf apply') {
            steps {
                sh "terraform -chdir=tf-provision apply -auto-approve -input=false"
            }
        }
        stage('test docker') {
            steps {
                script {
                app_server_ip = sh(
                    returnStdout: true, 
                    script: 'terraform -chdir=tf-provision output -raw AppServerIp'
                ).trim()
                sh "./tf-provision/files/check-server.sh ${app_server_ip}:80 ${app_server_ip}:8080"
                }
            }
        }
    }
}