/*
Provisions an RDS DB instance, ALB and an EC2 instance for a Petclinic application.
If the RDS already exiists, but is not available (i.e. stopped) it tries to start it 
and wait for it to become available. After provisioning an application EC2 instance it runs Apache2 
container and exposes it on :8080 to tests a connection and validate server configuration.
*/

def app_server_ip
pipeline {
    agent {label 'ec2'}

    environment {
        TF_CLI_ARGS="-no-color"
        TF_IN_AUTOMATION="true" // effective if not empt
    }


    stages {
        stage('tf db init') {
            steps {
                sh "terraform -chdir=tf-db init -input=false"
            }
        }
        stage('tf db apply') {
            steps {
                sh "terraform -chdir=tf-db apply -auto-approve -input=false"

                // start RDS instance
                script {
                    def instance_id = sh(
                      returnStdout: true, 
                      script: 'terraform -chdir=tf-db output -raw RdsInstanceIdentifier'
                    ).trim()
                    sh """
                        # if rds is stopped
                        rds_state=\$(aws rds describe-db-instances --db-instance-identifier "${instance_id}" \
                            --output text --query='DBInstances[*].DBInstanceStatus')
                        if [[ "\$rds_state" == "stopped" ]]; 
                        then
                            echo "Start rds instance..."
                            aws rds start-db-instance \
                                --db-instance-identifier ${instance_id}
                            # wait for rds to become available
                            ./tf-provision/files/wait-for-rds.sh ${instance_id} available
                        fi;"""
                }
            }
        }
        stage('tf init') {
            steps {
                sh "terraform -chdir=tf-provision init -input=false"
            }
        }
        stage('tf apply') {
            steps {
                sh "terraform -chdir=tf-provision apply -auto-approve -input=false"
            }
        }
        stage('test docker') {
            steps {
                script {
                app_server_ip = sh(
                    returnStdout: true, 
                    script: 'terraform -chdir=tf-provision output -raw AppServerIp'
                ).trim()

                // check server connectivity
                sh "./tf-provision/files/check-server.sh ${app_server_ip}:80 ${app_server_ip}:8080"
                }
            }
        }
    }
}